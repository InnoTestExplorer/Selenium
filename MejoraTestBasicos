using FluentAssertions;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System.Diagnostics;

namespace TestAutomation.test.Inicio
{

    [TestFixture]
    public class TestBasicos
    {

        ChromeDriver driver;

        [TearDown]
        public void TearDown()
        {          
                driver.Quit();  
                driver.Dispose();             
        }


        [SetUp]
        public void Setup() 
        {
            driver = new ChromeDriver();
            driver.Manage().Window.Maximize();
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(3);
            driver.Url = "https://curso.testautomation.es";

        }


        [Test]
        public void TestBasicWebPage()
        {
            
           
            var normalLoadDriver = driver.FindElement(By.Id("NormalWeb"));
            normalLoadDriver.Click();
            var titulo = driver.FindElement(By.CssSelector("h1"));

            titulo.Text.Should().Be("Normal load website");      

        }    

        [Test]
        public void SlowLoadWebpage()
        {
            
            var slowLoadDriver = driver.FindElement(By.Id("SlowLoadWeb"));
            slowLoadDriver.Click();
            var titulo = driver.FindElement(By.Id("title"));

            titulo.Text.Should().Be("Slow load website");

        }

        [Test]
        public void SlowTextWebpage()
        {
            
            var slowTextWebpage = driver.FindElement(By.Id("SlowSpeedTextWeb"));
            slowTextWebpage.Click();            
            var titulo = driver.FindElement(By.Id("title"));

            WaitForCondition(() => IsTextElement(titulo, "Slow load website"));


        }

        private bool IsTextElement(IWebElement element, string expectedText)
        {
            return element.Text.Equals(expectedText);
        }

        private void WaitForCondition(Func<bool> condition, int msTimeout = 4000)
        {
            var stopWatch = new Stopwatch();
            stopWatch.Start();
            Exception? ex;
            do
            {
                try
                {
                    ex = null;
                    if (condition())
                    {
                        return;
                    }
                }
                catch (Exception e)
                {
                    ex = e;
                }
            } while (stopWatch.ElapsedMilliseconds <= msTimeout);
            stopWatch.Stop();

            if (ex != null)
            {
                throw new TimeoutException("Error executing the call.", ex);
            }

            throw new TimeoutException("Error, the condition was false.");
        }

    }
}

        
    

